import cv2
import numpy as np
import open3d as o3d

def get_polygon_pixels(vertices, scale=2):
    # 获取四边形顶点的坐标
    p1, p2, p3, p4 = vertices
    
    # 确定四边形的最小和最大边界
    x_min = int(min(p1[0], p2[0], p3[0], p4[0]))
    x_max = int(max(p1[0], p2[0], p3[0], p4[0]))
    y_min = int(min(p1[1], p2[1], p3[1], p4[1]))
    y_max = int(max(p1[1], p2[1], p3[1], p4[1]))

    # 创建用于存储所有像素坐标的列表
    pixel_coords = []

    # 遍历四边形内的所有像素点
    for y in range(y_min, y_max + 1, scale):
        for x in range(x_min, x_max + 1, scale):
            if is_point_inside_polygon(x, y, vertices):
                pixel_coords.append((x, y))

    return pixel_coords

def is_point_inside_polygon(x, y, vertices):
    # 判断点是否在四边形内部
    p1, p2, p3, p4 = vertices
    
    # 根据点是否在四条边的同一侧来判断点是否在四边形内部
    return (
        is_on_same_side(x, y, p1, p2, p3) 
        and is_on_same_side(x, y, p2, p3, p4)
        and is_on_same_side(x, y, p3, p4, p1)
        and is_on_same_side(x, y, p4, p1, p2)
    )

def is_on_same_side(x, y, p1, p2, p):
    # 检查点p是否在p1p2直线的同一侧
    return (y - p1[1]) * (p2[0] - p1[0]) - (x - p1[0]) * (p2[1] - p1[1]) >= 0

def Get3DPointsOnPlane(pixels, Plane, img, fx, fy, cx, cy):
    Points = []
    Colors = []
    for i in pixels:
        x = i[0]
        y = i[1]
        X = (x-cx) / fx
        Y = (y-cy) / fy
        scale = (-Plane[3]) / (Plane[0]*X + Plane[1]*Y + Plane[2])
        X = X * scale
        Y = Y * scale
        Z = scale
        Points.append([X, Y, Z])
        Colors.append([img[y][x][2]/255, img[y][x][1]/255, img[y][x][0]/255])
    return Points, Colors

def GetPcd(img, pixels, plane, fx, fy, cx, cy, T):
    points, colors = Get3DPointsOnPlane(pixels, plane, img, fx, fy, cx, cy)
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(np.array(points))
    pcd.colors = o3d.utility.Vector3dVector(np.array(colors))
    pcd.transform(T)

    return pcd

if __name__ == "__main__":
    root = "data\\img\\"
    # 相机参数
    fx = 518.9676  # 焦距x（单位像素）
    fy = 518.8752  # 焦距y（单位像素）
    cx = 320.5550  # 光心x
    cy = 237.8842  # 光心y

    Planes = [[[0.0621294, -0.0317259, 0.997564, -1.49562]],
             [[0.375814, -0.0428255, 0.925705, -1.50254], [0.927755, 0.00108734, -0.373187, 1.12946]],
             [[0.438069, -0.0324777, 0.898354, -1.50926], [0.89641, 0.00175148, -0.443223, 1.12559]],
             [[-0.799398, -0.0110449, 0.6007, -1.09523]],
             [[0.686264, 0.0157385, -0.727182, 1.10211]],
             [[0.432539, -0.00160202, -0.901614, 1.08332]],
             [[0.198648, -0.00251076, -0.980068, 1.07732]],
             [[-0.045946, 0.0547998, -0.99744, 1.06504]],
             [[-0.350143, 0.0694351, -0.934119, 1.06096]],
             [[-0.476615, 0.0284103, -0.878653, 1.07245]]]
    Vertices = [[[(6, 6), (600, 6), (600, 460), (6, 460)]],
              [[(178, 3), (636, 3), (636, 476), (189, 476)], [(3, 3), (179, 3), (189, 476), (3, 476)]],
              [[(221, 3), (300, 3), (300, 476), (231, 476)], [(2, 2), (220, 3), (230, 476), (3, 476)]],
              [[(2, 2), (328, 2), (337, 476), (3, 476)]],
              [[(2, 2), (418, 2), (424, 476), (3, 476)]],
              [[(2, 2), (500, 2), (500, 476), (3, 476)]],
              [[(2, 2), (625, 2), (625, 476), (3, 476)]],
              [[(2, 2), (625, 2), (625, 476), (3, 476)]],
              [[(2, 2), (500, 2), (500, 476), (3, 476)]],
              [[(20, 2), (500, 2), (500, 476), (20, 476)]]]
    Ts = [
        [np.array([[1.,0.,0.,0.],
                [0.,1.,0.,0.],
                [0.,0.,1.,0.],
                [0.,0.,0.,1.]])],
        [np.array([[0.948135,-0.00130123,-0.317865,-0.00429843],
        [0.00474531,0.999938,0.010061,-0.00324353],
        [0.317832,-0.0110476,0.948083,-0.00677258],
        [0.,0.,0.,1.]])],
        [np.array([[0.99767,0.00631306,-0.0679335,-0.0154828],
        [-0.00688337,0.999943,-0.0081644,0.0176635],
        [0.0678781,0.00861299,0.997656,-0.000158041],
        [0.,0.,0.,1.]])],
        [np.array([[0.982873,0.00718028,-0.184144,-0.03418],
        [-0.00587051,0.999953,0.00765693,0.0112213],
        [0.18419,-0.00644477,0.98287,-0.000540884],
        [0.,0.,0.,1.]])],
        [np.array([[0.985544,0.012627,-0.168947,0.00594807],
        [-0.0139642,0.99988,-0.0067293,-0.00928623],
        [0.168842,0.00899124,0.985602,-0.0037079],
        [0.,0.,0.,1.]])],
        [np.array([[0.952513,-0.0143009,-0.304162,-0.0269912],
        [0.0104734,0.999844,-0.0142116,0.0397295],
        [0.304318,0.0103512,0.952514,0.00123498],
        [0.,0.,0.,1.]])],
        [np.array([[0.96957,-0.00139395,-0.244812,-0.00468959],
        [0.00126851,0.999999,-0.000670043,0.0079873],
        [0.244813,0.000339107,0.96957,0.00439101],
        [0.,0.,0.,1.]])],
        [np.array([[0.969909,0.0127917,-0.243133,-0.0317803],
        [0.00119992,0.998356,0.057312,-0.060082],
        [0.243466,-0.0558792,0.968298,0.00624218],
        [0.,0.,0.,1.]])],
        [np.array([[0.951579,0.00135847,-0.307401,0.00520805],
        [0.00323899,0.99989,0.0144452,-0.00963234],
        [0.307387,-0.0147415,0.951471,0.00332098],
        [0.,0.,0.,1.]])],
        [np.array([[0.990339,0.00801723,-0.138437,0.00503115],
        [-0.0135884,0.999133,-0.0393454,0.0566014],
        [0.138001,0.0408464,0.989589,-0.00997975],
        [0.,0.,0.,1.]])]
        ]
    
    T = np.array([[1.,0.,0.,0.],
                   [0.,1.,0.,0.],
                   [0.,0.,1.,0.],
                   [0.,0.,0.,1.]])
    pcd_all = o3d.geometry.PointCloud()
    for i in range(0, 10, 1):
        T = np.matmul(T, Ts[i][0])
        img = cv2.imread(root + str(i+1) + ".jpg")
        for vertice, plane in zip(Vertices[i], Planes[i]):
            pixels = get_polygon_pixels(vertice)
            pcd = GetPcd(img, pixels, plane, fx, fy, cx, cy, T)
            pcd_all += pcd
    
    pcd_all.voxel_down_sample(voxel_size=0.1)
    o3d.visualization.draw_geometries([pcd_all])
    o3d.io.write_point_cloud("output.ply", pcd_all)