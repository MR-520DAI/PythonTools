import cv2
import numpy as np
import open3d as o3d

def get_polygon_pixels(vertices, scale=2):
    # 获取四边形顶点的坐标
    p1, p2, p3, p4 = vertices
    
    # 确定四边形的最小和最大边界
    x_min = int(min(p1[0], p2[0], p3[0], p4[0]))
    x_max = int(max(p1[0], p2[0], p3[0], p4[0]))
    y_min = int(min(p1[1], p2[1], p3[1], p4[1]))
    y_max = int(max(p1[1], p2[1], p3[1], p4[1]))

    # 创建用于存储所有像素坐标的列表
    pixel_coords = []

    # 遍历四边形内的所有像素点
    for y in range(y_min, y_max + 1, scale):
        for x in range(x_min, x_max + 1, scale):
            if is_point_inside_polygon(x, y, vertices):
                pixel_coords.append((x, y))

    return pixel_coords

def is_point_inside_polygon(x, y, vertices):
    # 判断点是否在四边形内部
    p1, p2, p3, p4 = vertices
    
    # 根据点是否在四条边的同一侧来判断点是否在四边形内部
    return (
        is_on_same_side(x, y, p1, p2, p3) 
        and is_on_same_side(x, y, p2, p3, p4)
        and is_on_same_side(x, y, p3, p4, p1)
        and is_on_same_side(x, y, p4, p1, p2)
    )

def is_on_same_side(x, y, p1, p2, p):
    # 检查点p是否在p1p2直线的同一侧
    return (y - p1[1]) * (p2[0] - p1[0]) - (x - p1[0]) * (p2[1] - p1[1]) >= 0

def Get3DPointsOnPlane(pixels, Plane, img, fx, fy, cx, cy):
    Points = []
    Colors = []
    for i in pixels:
        x = i[0]
        y = i[1]
        X = (x-cx) / fx
        Y = (y-cy) / fy
        scale = (-Plane[3]) / (Plane[0]*X + Plane[1]*Y + Plane[2])
        X = X * scale
        Y = Y * scale
        Z = scale
        Points.append([X, Y, Z])
        Colors.append([img[y][x][2]/255, img[y][x][1]/255, img[y][x][0]/255])
    return Points, Colors

def GetPcd(img, pixels, plane, fx, fy, cx, cy, T):
    points, colors = Get3DPointsOnPlane(pixels, plane, img, fx, fy, cx, cy)
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(np.array(points))
    pcd.colors = o3d.utility.Vector3dVector(np.array(colors))
    pcd.transform(T)

    return pcd

if __name__ == "__main__":
    root = "data\\img\\"
    # 相机参数
    fx = 518.9676  # 焦距x（单位像素）
    fy = 518.8752  # 焦距y（单位像素）
    cx = 320.5550  # 光心x
    cy = 237.8842  # 光心y

    Planes = [
        [[0.0484219,-0.110808,0.992661,-1.52702]],
        [[0.043905,-0.252766,0.966531,-1.51663], [0.0014181,-0.967988,-0.250994,0.80797]],
        [[-0.333008,0.223288,-0.916105,1.52755], [0.00146407,-0.970998,-0.239082,0.813396]],
        [[-0.326322,0.0929639,-0.940676,1.5439]],
        [[0.60006,-0.0934954,0.794473,-1.50684], [0.801315,0.0653384,-0.594664,1.74731]],
        [[0.588816,-0.207283,0.781236,-1.51145], [-0.000827108,-0.966356,-0.257206,0.815533]],
        [[0.56345,0.202567,-0.800931,1.64436], [-0.00616038,-0.96861,-0.248509,0.807424]],
        [[0.557206,0.0969788,-0.824692,1.65917]],
        [[-0.380391,-0.107655,0.918539,-1.61231]],
        [[0.376725,0.21868,-0.900143,1.60121], [-0.00709721,-0.969891,-0.243435,0.802681]],
        [[-0.023787,-0.240789,0.970286,-1.52368], [0.00247104,-0.969979,-0.243176,0.807225]],
        [[0.0231583,-0.0936301,0.995338,-1.53132]],
        [[0.322698,-0.106838,0.940453,-1.33757], [0.955947,0.0288489,-0.292119,0.917756]],
        [[0.463623,-0.101612,0.880187,-1.50401], [-0.43426,0.0773516,-0.89746,0.861459]],
        [[-0.646189,0.073382,-0.759642,0.804897]],
        [[-0.598278,-0.0728096,0.797974,-1.25339], [-0.795534,0.0544544,-0.603457,0.926239]],
        [[0.233043,0.0951887,-0.967796,1.46986]],
        [[-0.0470884,-0.0938375,0.994473,-1.46876]],
        [[0.0533073,0.233582,-0.970875,1.45758], [0.0108956,-0.973525,-0.228321,0.786176]],
        [[0.185516,-0.221886,0.957262,-1.46427], [0.00476823,-0.973476,-0.228741,0.783674]],
        [[0.182763,-0.0832199,0.979629,-1.47326]],
        [[0.444254,-0.091215,0.891245,-1.48156]],
        [[-0.432999,0.206642,-0.877389,1.46182], [0.000918822,-0.970566,-0.240835,0.795549]],
        [[0.636597,-0.172438,0.751671,-1.52481], [0.00207265,-0.970013,-0.243043,0.804725]],
        [[0.651899,-0.0704308,0.755028,-1.51111], [0.781163,0.0742987,-0.61989,1.40061]],
        [[0.583501,0.105684,-0.805206,1.37325],], #[0.830172,-0.0334325,0.556504,-1.53324]
        [[-0.584231,-0.220578,0.781037,-1.36161], [0.00127183,-0.963314,-0.268375,0.813566]],
        [[-0.353049,-0.264881,0.897326,-1.45194], [0.00571289,-0.965345,-0.260915,0.8135]],
        [[0.0137587,0.260435,-0.965393,1.39747], [0.0107914,-0.965191,-0.261324,0.807777]],
        [[0.0103334,0.135745,-0.99069,1.41021]],
        [[-0.0283468,0.258187,-0.965679,1.36876], [0.00995448,-0.966891,-0.254996,0.807447]],
        [[-0.356525,0.0984126,-0.929088,1.3481]],
        [[0.362053,-0.246016,0.899107,-1.35153], [0.0118362,-0.958614,-0.284464,0.802286]],
        [[0.603143,-0.227364,0.764542,-1.38315], [0.00574378,-0.957742,-0.287572,0.804347]],
        [[-0.617269,0.0688136,-0.783737,1.37776], [0.804762,0.0625797,-0.59029,1.73981]],
        [[-0.764024,0.0740906,-0.64092,1.2948], [0.647694,0.0915017,-0.756386,1.61844]],
        [[0.751893,-0.165256,0.638238,-1.30527], [-0.00192571,-0.964921,-0.262532,0.811925]],
        [[0.346026,0.231589,-0.909193,1.54904], [0.00141238,-0.970753,-0.240076,0.810213]]
             ]
    Vertices = [
        [[(2, 2), (600, 2), (600, 450), (2, 436)]],
        [[(2, 2), (600, 2), (600, 369), (2, 357)], [(2, 358), (600, 370), (600, 476), (2, 476)]],
        [[(9, 2), (605, 2), (605, 403), (48, 313)], [(48, 314), (605, 404), (605, 476), (5, 476)]],
        [[(19, 2), (300, 2), (300, 430), (42, 385)]],
        [[(207, 2), (407, 2), (407, 427), (217, 367)], [(2, 2), (177, 2), (189, 372), (2, 438)]],
        [[(205, 2), (405, 2), (405, 345), (219, 289)], [(219, 290), (559, 391), (514, 476), (2, 373)]],
        [[(2, 2), (385, 2), (379, 292), (2, 402)], [(2, 403), (379, 293), (500, 476), (2, 476)]],
        [[(2, 2), (383, 2), (380, 367), (2, 467)]],
        [[(2, 2), (280, 2), (281, 413), (2, 459)]],
        [[(2, 2), (278, 2), (292, 350), (2, 403)], [(2, 404), (528, 306), (584, 476), (2, 476)]],
        [[(2, 2), (526, 2), (496, 373), (2, 377)], [(2, 378), (515, 373), (592, 476), (2, 476)]],
        [[(2, 2), (539, 2), (523, 457), (2, 453)]],
        [[(144, 2), (600, 2), (600, 476), (156, 376)], [(2, 2), (143, 2), (158, 430), (2, 460)]],
        [[(282, 2), (600, 2), (627, 464), (285, 409)], [(2, 2), (137, 2), (150, 456), (2, 440)]],
        [[(148, 2), (332, 2), (329, 446), (147, 436)]],
        [[(2, 2), (323, 2), (314, 429), (2, 430)], [(324, 2), (543, 2), (523, 465), (315, 429)]],
        [[(2, 2), (420, 2), (420, 423), (2, 466)]],
        [[(2, 2), (500, 2), (500, 458), (2, 465)]],
        [[(2, 2), (500, 2), (500, 376), (2, 385)], [(2, 386), (595, 375), (595, 476), (2, 476)]],
        [[(2, 2), (500, 2), (500, 389), (2, 344)], [(2, 345), (630, 404), (630, 476), (2, 476)]],
        [[(2, 2), (500, 2), (500, 472), (2, 424)]],
        [[(143, 2), (620, 2), (620, 475), (148, 392)]],
        [[(132, 2), (500, 2), (500, 392), (149, 315)], [(149, 316), (636, 423), (636, 476), (2, 387)]],
        [[(296, 2), (600, 2), (600, 405), (293, 306)], [(293, 307), (600, 406), (559, 476), (2, 423)]],
        [[(299, 2), (600, 2), (600, 462), (293, 365)], [(2, 2), (298, 2), (292, 383), (20, 473)]],
        [[(2, 2), (456, 2), (437, 384), (2, 451)],], # [(457, 2), (600, 2), (620, 462), (438, 384)]
        [[(2, 2), (460, 2), (435, 301), (2, 429)], [(2, 430), (435, 302), (629, 383), (2, 476)]],
        [[(2, 2), (612, 2), (565, 313), (2, 407)], [(2, 408), (565, 314), (605, 477), (2, 476)]],
        [[(2, 2), (600, 2), (600, 376), (2, 376)], [(2, 377), (630, 376), (630, 476), (2, 476)]],
        [[(2, 2), (600, 2), (600, 463), (2, 462)]],
        [[(2, 2), (600, 2), (600, 390), (2, 378)], [(2, 379), (600, 391), (600, 476), (2, 476)]],
        [[(2, 2), (600, 2), (600, 460), (2, 350)]],
        [[(2, 2), (600, 2), (600, 409), (2, 290)], [(2, 291), (600, 410), (600, 476), (2, 460)]],
        [[(170, 2), (600, 2), (600, 406), (188, 272)], [(188, 273), (600, 407), (600, 476), (9, 337)]],
        [[(179, 2), (600, 2), (600, 450), (185, 384)], [(2, 2), (178, 2), (185, 383), (2, 452)]],
        [[(303, 2), (600, 2), (600, 440), (303, 288)], [(2, 2), (302, 2), (301, 377), (2, 470)]],
        [[(300, 2), (590, 2), (541, 385), (299, 286)], [(2, 389), (297, 299), (459, 369), (2, 476)]],
        [[(2, 2), (524, 2), (496, 323), (2, 404)], [(2, 405), (496, 324), (596, 381), (2, 470)]],
              ]
    Ts = [
        [np.array([[1.,0.,0.,0.],
                [0.,1.,0.,0.],
                [0.,0.,1.,0.],
                [0.,0.,0.,1.]])],
        [np.array([[0.99999,-0.0018417,0.00419216,-0.0081959],
[0.00121845,0.989564,0.144089,0.00204902],
[-0.00441378,-0.144082,0.989556,0.0110965],
[0.,0.,0.,1.]])],
        [np.array([[0.956635,0.0696445,-0.28284,-0.0155694],
[-0.0743249,0.997217,-0.00583781,0.00428105],
[0.281647,0.0266067,0.959149,-0.00947135],
[0.,0.,0.,1.]])],
        [np.array([[0.999955,0.00558947,0.00767547,-0.0120723],
[-0.00447747,0.990431,-0.137935,0.00692398],
[-0.008373,0.137895,0.990411,-0.0117717],
[0.,0.,0.,1.]])],
        [np.array([[0.951977,0.0365675,-0.303977,0.00707728],
[-0.0307759,0.999242,0.0238237,-0.0403109],
[0.304618,-0.0133245,0.952381,0.0329582],
[0.,0.,0.,1.]])],
        [np.array([[0.999891,-0.00823665,0.0122875,-0.0213982],
[0.0064596,0.990379,0.138231,0.0190721],
[-0.0133078,-0.138137,0.990324,0.0126065],
[0.,0.,0.,1.]])],
        [np.array([[0.944917,0.0764969,-0.318246,-0.0872006],
[-0.0789801,0.996863,0.00511316,0.00065426],
[0.317639,0.0203036,0.947994,0.0293609],
[0.,0.,0.,1.]])],
        [np.array([[0.999966,0.00422414,-0.00709733,0.013702],
[-0.00512765,0.991165,-0.132537,-0.018054],
[0.00647477,0.132569,0.991153,-0.0134168],
[0.,0.,0.,1.]])],
        [np.array([[0.979885,0.0168252,-0.198854,-0.0467585],
[-0.0161719,0.999857,0.00490906,-0.0121787],
[0.198909,-0.00159446,0.980017,0.023797],
[0.,0.,0.,1.]])],
        [np.array([[0.999984,-0.00294939,-0.00479568,0.00219781],
[0.00351676,0.992404,0.122968,0.0339764],
[0.00439657,-0.122983,0.992399,0.0169761],
[0.,0.,0.,1.]])],
        [np.array([[0.934734,0.0629183,-0.349734,-0.099651],
[-0.0593814,0.998018,0.0208382,-0.0229765],
[0.350352,0.00128954,0.936617,0.0388428],
[0.,0.,0.,1.]])],
        [np.array([[0.998896,0.00260644,-0.0468943,0.0152091],
[-0.00955995,0.98884,-0.148676,0.00925117],
[0.0459835,0.14896,0.987773,-0.00520488],
[0.,0.,0.,1.]])],
        [np.array([[0.9537,0.0273222,-0.299515,-0.145473],
[-0.0218831,0.999529,0.0214995,-0.0500203],
[0.299961,-0.0139498,0.953849,0.193337],
[0.,0.,0.,1.]])],
        [np.array([[0.988202,0.008402,-0.152924,-0.112799],
[-0.00871139,0.999961,-0.00135321,0.00920433],
[0.152906,0.00266943,0.988237,-0.137228],
[0.,0.,0.,1.]])],
        [np.array([[0.967921,0.0428476,-0.247573,-0.137171],
[-0.0374404,0.998947,0.0265098,-0.0430373],
[0.248448,-0.0163901,0.968506,0.125701],
[0.,0.,0.,1.]])],
        [np.array([[0.976481,0.0201191,-0.214663,-0.170684],
[-0.0213199,0.999767,-0.0032798,0.00642791],
[0.214547,0.00777926,0.976683,-0.0139223],
[0.,0.,0.,1.]])],
        [np.array([[0.9185,0.0551677,-0.391555,0.153799],
[-0.0559111,0.99839,0.00951216,0.0390487],
[0.391449,0.0131553,0.920106,-0.152382],
[0.,0.,0.,1.]])],
        [np.array([[0.982358,0.0151605,-0.186392,-0.0257398],
[-0.0158332,0.999872,-0.00212058,0.00870349],
[0.186336,0.00503435,0.982473,-0.00420517],
[0.,0.,0.,1.]])],
        [np.array([[0.999981,-0.00166937,0.00600087,-0.00593984],
[0.000803082,0.989929,0.141561,0.00544714],
[-0.00617675,-0.141554,0.989911,0.0114753],
[0.,0.,0.,1.]])],
        [np.array([[0.971355,0.0542355,-0.231363,-0.0115906],
[-0.0561521,0.998421,-0.00170198,0.0131538],
[0.230905,0.0146448,0.972866,-0.00436269],
[0.,0.,0.,1.]])],
        [np.array([[0.999994,-0.0020189,0.00263977,0.00397468],
[0.00237533,0.989739,-0.142865,-0.00156576],
[-0.00232426,0.14287,0.989739,-0.010524],
[0.,0.,0.,1.]])],
        [np.array([[0.961987,0.0215881,-0.272242,-0.0652204],
[-0.0174438,0.999692,0.0176342,-0.0310102],
[0.272539,-0.0122149,0.962067,0.00105985],
[0.,0.,0.,1.]])],
        [np.array([[0.99992,-0.00464119,0.0117745,-0.0168003],
[0.003095,0.991758,0.128089,0.0279483],
[-0.0122719,-0.128042,0.991693,0.0333845],
[0.,0.,0.,1.]])],
        [np.array([[0.970798,0.054113,-0.233714,-0.0614911],
[-0.0553979,0.998464,0.00106827,0.0206717],
[0.233413,0.0119102,0.972305,-0.0365783],
[0.,0.,0.,1.]])],
        [np.array([[0.999795,-0.00121553,-0.0202037,0.0351858],
[-0.00151615,0.990893,-0.134644,-0.0154715],
[0.0201833,0.134647,0.990688,-0.0151217],
[0.,0.,0.,1.]])],
        [np.array([[0.962795,0.0275153,-0.268829,-0.0113924],
[-0.0221886,0.999493,0.0228337,-0.0225742],
[0.269321,-0.0160192,0.962917,0.0270759],
[0.,0.,0.,1.]])],
        [np.array([[0.999998,0.00125986,0.00128919,-0.00346427],
[-0.00143141,0.989703,0.143126,0.0121974],
[-0.0010956,-0.143127,0.989704,0.0135465],
[0.,0.,0.,1.]])],
        [np.array([[0.965559,0.0668693,-0.251446,0.0386644],
[-0.0628541,0.997735,0.023975,-0.0120024],
[0.25248,-0.00734488,0.967574,-0.0901212],
[0.,0.,0.,1.]])],
        [np.array([[0.940155,0.0690748,-0.333672,-0.0147866],
[-0.0755524,0.997121,-0.00645866,0.0187131],
[0.332265,0.0312819,0.942667,0.0604086],
[0.,0.,0.,1.]])],
        [np.array([[0.999994,-0.000159666,-0.00347947,0.00490505],
[-0.000283429,0.991906,-0.126974,-0.0359733],
[0.00347158,0.126974,0.9919,-0.0228307],
[0.,0.,0.,1.]])],
        [np.array([[0.999251,0.00885637,-0.0376645,0.0124967],
[-0.00408893,0.992171,0.124817,0.030674],
[0.0384751,-0.124569,0.991465,0.046171],
[0.,0.,0.,1.]])],
        [np.array([[0.944017,0.0352806,-0.328006,-0.0586887],
[-0.0856919,0.986361,-0.140532,0.00391832],
[0.318574,0.160772,0.934164,0.0241641],
[0.,0.,0.,1.]])],
        [np.array([[0.999982,0.000554185,-0.00598941,-0.00406457],
[0.000414031,0.987043,0.160454,0.0233121],
[0.00600073,-0.160454,0.987025,0.000337231],
[0.,0.,0.,1.]])],
        [np.array([[0.961854,0.0692407,-0.264655,-0.0576956],
[-0.0646827,0.997569,0.0259098,-0.0211078],
[0.265805,-0.00780293,0.963995,-0.0177103],
[0.,0.,0.,1.]])],
        [np.array([[0.999841,0.000592391,-0.0178468,0.0303862],
[-0.00416479,0.979622,-0.200809,-0.0141433],
[0.0173642,0.200852,0.979468,-0.0211274],
[0.,0.,0.,1.]])],
        [np.array([[0.973464,0.0197653,-0.227987,-0.0340567],
[-0.0141999,0.99956,0.026026,-0.0123689],
[0.228401,-0.0220979,0.973316,0.15787],
[0.,0.,0.,1.]])],
        [np.array([[0.999811,0.000818771,0.0194415,-0.0249868],
[-0.00361797,0.989515,0.144387,0.00704615],
[-0.0191195,-0.14443,0.98933,0.0142652],
[0.,0.,0.,1.]])],
        [np.array([[0.945838,0.0811073,-0.314343,-0.0999566],
[-0.0883491,0.99605,-0.00883434,-0.00447162],
[0.312385,0.0361278,0.949268,0.0236517],
[0.,0.,0.,1.]])]
        ]
    
    T = np.array([[1.,0.,0.,0.],
                   [0.,1.,0.,0.],
                   [0.,0.,1.,0.],
                   [0.,0.,0.,1.]])
    pcd_all = o3d.geometry.PointCloud()
    for i in range(1, 3, 1):
        T = np.matmul(T, Ts[i][0])
        img = cv2.imread(root + str(i+1) + ".jpg")
        for vertice, plane in zip(Vertices[i], Planes[i]):
            pixels = get_polygon_pixels(vertice)
            pcd = GetPcd(img, pixels, plane, fx, fy, cx, cy, T)
            pcd_all += pcd
    
    pcd_all.voxel_down_sample(voxel_size=0.1)
    o3d.visualization.draw_geometries([pcd_all])
    o3d.io.write_point_cloud("output.ply", pcd_all)