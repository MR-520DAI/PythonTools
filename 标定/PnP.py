import numpy as np
import cv2

# 准备数据（示例数据）
objectPoints = np.array([
[0.450099,0.347482,1.24793,],
[0.0349344,0.601197,1.24854,],
[-0.453838,0.358274,1.25387,],
[0.436129,-0.293704,1.25258,],
[-0.457115,-0.309913,1.2589,],

[0.431722,0.3339,1.19349,],
[0.0392459,0.664844,1.38801,],
[-0.612441,0.478262,1.71951,],
[0.420575,-0.283548,1.20522,],
[-0.617447,-0.416357,1.73085,],

[0.391544,0.304203,1.07444,],
[0.029587,0.522257,1.07555,],
[-0.394088,0.313072,1.07845,],
[0.379709,-0.256863,1.0808,],
[-0.397537,-0.270359,1.08352,],

[0.372856,0.290391,1.01907,],
[0.0320227,0.558214,1.15435,],
[-0.495444,0.38975,1.37602,],
[0.363545,-0.246309,1.03158,],
[-0.500473,-0.338699,1.38653,],

[0.339841,0.265989,0.92125,],
[0.0249956,0.454477,0.927023,],
[-0.344035,0.275206,0.931499,],
[0.329388,-0.224006,0.927586,],
[-0.347316,-0.237018,0.935695,],

[0.325513,0.255399,0.8788,],
[0.0271233,0.485887,0.995854,],
[-0.432878,0.342418,1.19233,],
[0.315969,-0.215244,0.88673,],
[-0.437464,-0.296867,1.20105,],
], dtype=np.float32)
imagePoints = np.array([
[139, 132],
[311, 27],
[513, 127],
[148, 396],
[514, 402],

[138, 133],
[311, 25],
[509, 121],
[147, 398],
[510, 389],

[138, 135],
[312, 30],
[516, 130],
[147, 404],
[517, 409],

[137, 137],
[311, 28],
[512, 126],
[146, 407],
[513, 398],

[136, 140],
[313, 34],
[519, 134],
[145, 413],
[520, 418],

[135, 141],
[313, 32],
[514, 128],
[145, 416],
[515, 404],
], dtype=np.float32)

# 定义相机的内参数矩阵（示例参数）
fx = 518.9676  # 焦距
fy = 518.8752
cx = 320.555  # 图像中心点坐标
cy = 237.8842
cameraMatrix = np.array([[fx, 0, cx],
                         [0, fy, cy],
                         [0, 0, 1]], dtype=np.float32)

# 运行PnP算法
distCoeffs = np.zeros((4, 1), dtype=np.float32)  # 畸变参数，默认为空
success, rvec, tvec = cv2.solvePnP(objectPoints, imagePoints, cameraMatrix, distCoeffs)

if success:
    # 得到旋转矩阵（从旋转向量转换）
    rotationMatrix, _ = cv2.Rodrigues(rvec)

    # 打印结果
    print("旋转矩阵:")
    print(rotationMatrix)
    print("平移矩阵:")
    print(tvec)
else:
    print("PnP求解失败")